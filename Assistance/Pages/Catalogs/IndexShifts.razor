@page "/Catalogs/Shifts"

<Div Class="row">
    <Div Class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
        <h3 class="text-secondary">
            Turnos
        </h3>
    </Div>

    <Div Class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
        <Breadcrumb Class="float-end text-dark">
            <BreadcrumbItem>
                <BreadcrumbLink><Icon Name="IconName.Home" /></BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbItem>
                <BreadcrumbLink><Icon Name="IconName.LayerGroup" /></BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbItem Active>
                <BreadcrumbLink>Turnos</BreadcrumbLink>
            </BreadcrumbItem>
        </Breadcrumb>
    </Div>
</Div>


<Div Class="card bg-white shadow-sm">
    <Div Class="card-header bg-dark text-white">
        <Icon Class="fa-solid fa-table-cells" />
        <Strong>Lista de Turnos</Strong>
    </Div>
    <Div Class="card-body">
        <Div Class="row">
            <Div Class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
                <Button Color="Color.Primary" Size="Size.Small" Clicked="AddModal" Class="mb-2">
                    <Icon Name="IconName.Add" />
                    <Strong>Nuevo</Strong>
                </Button>

                <Buttons Size="Size.Small" Class="mb-2">
                    <Button Color="Color.Light">
                        <Icon Class="fa-regular fa-file-pdf" />
                        <Strong>Pdf</Strong>
                    </Button>

                    <Button Color="Color.Light">
                        <Icon Class="fa-regular fa-file-excel" />
                        <Strong>Excel</Strong>
                    </Button>

                    <Button Color="Color.Light">
                        <Icon Class="fa-solid fa-print" />
                        <Strong>Imprimir</Strong>
                    </Button>
                </Buttons>
            </Div>

            <Div Class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
                <Addons Size="Size.Small" Class="mb-2">
                    <Addon AddonType="AddonType.Body">
                        <TextEdit Text="@customFilterValue" TextChanged="@OnCustomFilterValueChanged" Placeholder="Buscar..."></TextEdit>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel><Icon Name="IconName.Search"></Icon></AddonLabel>
                    </Addon>
                </Addons>
            </Div>
        </Div>

        <DataGrid TItem="Tblturno"
                  Data="@lstShifts"
                  Narrow
                  Hoverable
                  ShowPager
                  ShowPageSizes
                  PageSize="10"
                  Responsive
                  CustomFilter="@OnCustomFilter"
                  SelectionMode="DataGridSelectionMode.Multiple"
                  @bind-SelectedRows="selectedRecords"
                  RowSelectable="@RowSelectableHandler"
                  RowDoubleClicked="@OnDoubleClick"
                  RowStyling="@OnRowStyling"
                  @ref="dataGrid">

            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="Tblturno" Width="30px"></DataGridMultiSelectColumn>
                <DataGridCommandColumn TItem="Tblturno" />
                <DataGridColumn Field="@nameof( Tblturno.TurnoId )" Caption="#"></DataGridColumn>
                <DataGridColumn Field="@nameof( Tblturno.Turno )" Caption="TURNO"></DataGridColumn>
                <DataGridColumn Field="@nameof( Tblturno.HoraInicial )" Caption="ENTRADA"></DataGridColumn>                
                <DataGridColumn Field="@nameof( Tblturno.GetTolerancia )" Caption="TOLERANCIA"></DataGridColumn>                
                <DataGridColumn Field="@nameof( Tblturno.HoraFinal )" Caption="SALIDA"></DataGridColumn>
                <DataGridColumn Field="" Caption="ACCIONES">
                    <DisplayTemplate>
                        <Tooltip Text="Editar">
                            <Button Background="Background.Transparent" Size="Size.Small" Clicked="() => UpdateModal(context)">
                                <Icon Name="IconName.Edit"></Icon>
                            </Button>
                        </Tooltip>

                        <Tooltip Text="Desactivar">
                            <Button Background="Background.Transparent" Size="Size.Small" Clicked="() => DeleteModal(context)">
                                <Icon Name="IconName.Delete"></Icon>
                            </Button>
                        </Tooltip>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>

            <NextPageButtonTemplate><Icon Name="IconName.StepForward" /></NextPageButtonTemplate>
            <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" /></PreviousPageButtonTemplate>
            <LastPageButtonTemplate><Icon Name="IconName.Forward" /></LastPageButtonTemplate>
            <FirstPageButtonTemplate><Icon Name="IconName.Backward" /></FirstPageButtonTemplate>
            <ItemsPerPageTemplate></ItemsPerPageTemplate>
            <TotalItemsTemplate>
                <Badge Color="Color.Dark">Total: @context.TotalItems registros</Badge>
            </TotalItemsTemplate>
        </DataGrid>
    </Div>
</Div>


<Modal @ref="modalRef" Animated Closing="OnModalClosing">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>
                <Icon Name="IconName.Edit" />
                Turno
            </ModalTitle>
            <CloseButton />
        </ModalHeader>

        <ModalBody>
            <EditForm Model="shiftModel">
                <Validations @ref="validationsRef" Model="shiftModel" Mode="ValidationMode.Manual">
                    <Div Class="row mb-1">
                        <Div Class="col-xl-7 col-lg-7 col-md-7 col-sm-12">                            
                            <FieldLabel Class="input-xs text-muted text-uppercase">Turno:</FieldLabel>                                                                                                                          
                        </Div>

                        <Div Class="col-xl-5 col-lg-5 col-md-5 col-sm-12">
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <TextEdit @bind-Text="shiftModel.Turno" Size="Size.Small" Placeholder="ej: 1° Turno" TextTransform="TextTransform.Capitalize"> 
                                    <Feedback>
                                        <ValidationError>Campo Obligatorio</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </Div>                        
                    </Div>

                    <Div Class="row mb-1">
                        <Div Class="col-xl-7 col-lg-7 col-md-7 col-sm-12">                            
                            <FieldLabel Class="input-xs text-muted text-uppercase">Hora. Entrada:</FieldLabel>                                                                                                                          
                        </Div>

                        <Div Class="col-xl-5 col-lg-5 col-md-5 col-sm-12">
                            <Validation Validator="ValidationRule.IsSelected">
                                <TimeEdit TValue="TimeSpan?" Size="Size.Small" @bind-Time="shiftModel.HoraInicial" >
                                    <Feedback>
                                        <ValidationError>Campo Obligatorio</ValidationError>
                                    </Feedback>
                                </TimeEdit>
                            </Validation>
                        </Div>                        
                    </Div>
                    
                    <Div Class="row mb-1">
                        <Div Class="col-xl-7 col-lg-7 col-md-7 col-sm-12">                            
                            <FieldLabel Class="input-xs text-muted text-uppercase">Tolerancia (Minutos):</FieldLabel>                                                                                                                          
                        </Div>

                        <Div Class="col-xl-5 col-lg-5 col-md-5 col-sm-12">
                            
                            <NumericPicker TValue="int?" Size="Size.Small" @bind-Value="shiftModel.MtoleracianI">
                                <Feedback>
                                    <ValidationError>Campo Obligatorio</ValidationError>
                                </Feedback>
                            </NumericPicker>
                            
                        </Div>                        
                    </Div>
                    
                    <Div Class="row mb-1">
                        <Div Class="col-xl-7 col-lg-7 col-md-7 col-sm-12">                            
                            <FieldLabel Class="input-xs text-muted text-uppercase">Hora. Salida:</FieldLabel>                                                                                                                          
                        </Div>

                        <Div Class="col-xl-5 col-lg-5 col-md-5 col-sm-12">
                            <Validation Validator="ValidationRule.IsSelected">
                                <TimeEdit TValue="TimeSpan?" @bind-Time="shiftModel.HoraFinal" Size="Size.Small"> 
                                    <Feedback>
                                        <ValidationError>Campo Obligatorio</ValidationError>
                                    </Feedback>
                                </TimeEdit>
                            </Validation>
                        </Div>                        
                    </Div>                    
                </Validations>
            </EditForm>
        </ModalBody>

        <ModalFooter>
            @if (!disableForm)
            {
                <Button Color="Color.Primary" Clicked="OnSave">
                    <Icon Name="IconName.Save" />
                    <Strong>Guardar</Strong>
                </Button>
            }

            <Button Color="Color.Secondary" Clicked="CloseModal">
                <Icon Name="IconName.Times" />
                <Strong>Cerrar</Strong>
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<DeleteModal @ref="deleteModal"
             DeleteRecord="() => OnDelete(shiftModel)">
</DeleteModal>


@code {
    [CascadingParameter] LoadingIndicator loadingIndicator { get; set; }    
    [Inject] IShiftService shiftService { get; set; }    
    [Inject] MessageService messageService { get; set; }
    
    List<Tblturno> lstShifts = new();    

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        try
        {
            await Task.Delay(300);            
            await LoadShifts();
        }
        catch (Exception ex)
        {
            messageService.ShowNotification($"Error al iniciar: {ex.Message}", Noification.NotificationLevel.Error);
            throw;
        }
        finally
        {
            await loadingIndicator.Hide();
        }
    }

    private async Task LoadShifts()
    {
        lstShifts = await shiftService.GetShifts();
    }

    #region CRUD
    Tblturno shiftModel = new();
    Modal modalRef;
    DeleteModal deleteModal;
    Validations validationsRef;
    bool isNew, disableForm;

    //details modal
    private Task DetailsModal(Tblturno currentRecord)
    {
        shiftModel = currentRecord;
        isNew = false;
        disableForm = true;
        return modalRef.Show();
    }



    //add modal
    private Task AddModal()
    {
        shiftModel = new();
        isNew = true;
        disableForm = false;
        return modalRef.Show();
    }

    //update modal
    private Task UpdateModal(Tblturno currentRecord)
    {
        CopyData(currentRecord);
        isNew = false;
        disableForm = false;
        return modalRef.Show();
    }

    //copy for update
    private Tblturno CopyData(Tblturno currentData)
    {
        shiftModel.TurnoId = currentData.TurnoId;
        shiftModel.Turno = currentData.Turno;
        shiftModel.HoraInicial = currentData.HoraInicial;     
        shiftModel.HoraFinal = currentData.HoraFinal;
        shiftModel.MtoleracianI = currentData.MtoleracianI;
        shiftModel.Anio = currentData.Anio;
        shiftModel.FechaAlta = currentData.FechaAlta;

        return shiftModel;
    }

    //Save
    private async Task OnSave()
    {
        if (await validationsRef.ValidateAll())
        {
            try
            {
                if (isNew)
                {
                    await shiftService.PostShift(shiftModel);
                    messageService.ShowNotification("Turno Guardado!", Noification.NotificationLevel.Success);
                }
                else
                {
                    await shiftService.PutShift(shiftModel);
                    messageService.ShowNotification("Turno Actualizado!", Noification.NotificationLevel.Info);
                }

                await LoadShifts();
            }
            catch (Exception ex)
            {
                messageService.ShowNotification($"ERROR: {ex.Message}", Noification.NotificationLevel.Error);
                throw;
            }
            finally
            {
                await CloseModal();
            }
        }
    }

    //delete modal
    private Task DeleteModal(Tblturno currentRecord)
    {
        //currentRecord.Activo = false;
        //shiftModel = currentRecord;
        return deleteModal.OpenModal();
    }

    //delete record
    private async Task OnDelete(Tblturno recordToDelete)
    {
        try
        {
            await shiftService.PutShift(recordToDelete);
            messageService.ShowNotification("Turno Inactivo!", Noification.NotificationLevel.Warning);
            await LoadShifts();
        }
        catch (Exception ex)
        {
            messageService.ShowNotification($"ERROR:{ex.Message}", Noification.NotificationLevel.Error);
            throw;
        }
        finally
        {
            await deleteModal.CloseModal();
        }
    }

    #endregion

    #region FOR GRID
    private DataGrid<Tblturno> dataGrid;
    private List<Tblturno> selectedRecords;
    private string customFilterValue;

    private Task OnCustomFilterValueChanged(string e)
    {
        customFilterValue = e;
        return dataGrid.Reload();
    }

    private bool OnCustomFilter(Tblturno model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return (
                model.TurnoId.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
                || model.Turno?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
                || model.HoraInicial.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
                || model.HoraFinal.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
                || model.MtoleracianI.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true               
                || model.FechaAlta.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
                );
    }

    private void OnRowStyling(Tblturno model, DataGridRowStyling styling)
    {
        //if (!model.Activo ?? false)
        //    styling.Color = Color.Danger;
    }

    private bool RowSelectableHandler(RowSelectableEventArgs<Tblturno> rowSelectableEventArgs)
        => rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;


    public async void OnDoubleClick(Blazorise.DataGrid.DataGridRowMouseEventArgs<Tblturno> args)
    {
        await DetailsModal(args.Item);
    }

    #endregion

    #region TOOLS
    private bool cancelClose;
    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = cancelClose || e.CloseReason != CloseReason.UserClosing;
        return Task.CompletedTask;
    }

    private Task CloseModal()
    {
        return modalRef.Hide();
    }

    #endregion
}

